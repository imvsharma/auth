version: '3.8'
services:
  postgresdb:
    container_name: ${USER_DB_CONTAINER_NAME}
    image: ${USER_DB_IMAGE}
    hostname: postgresdb
    restart: always
    ports:
      # HOST:CONTAINER
      - ${USER_DB_PORT}:${USER_DB_PORT}
    volumes:
      - usersdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${USER_DB_PASSWORD}
      - POSTGRES_USER=${USER_DB_USERNAME}
      - POSTGRES_DB=${USER_DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${USER_DB_USERNAME} -d ${USER_DB_NAME}'"]
      interval: 10s
      timeout: 5s
      retries: 5


  # kongdb:
  #   image: postgres:latest
  #   container_name: kongdb
  #   hostname: kongdb
  #   restart: always
  #   ports:
  #     #Host:Container
  #     - "5433:5432"
  #   environment:
  #     - POSTGRES_PASSWORD=kongpass
  #     - POSTGRES_USER=kong
  #     - POSTGRES_DB=kong
  #   volumes:
  #     - kongdata:/var/lib/postgresql/data

  # kong-bootstrap:
  #   build:
  #     context: ./kong
  #     dockerfile: Dockerfile
  #   container_name: kong-bootstrap
  #   hostname: kong-bootstrap
  #   environment:
  #     - KONG_DATABASE=postgres
  #     - KONG_PG_HOST=kongdb
  #     - KONG_PG_DATABASE=kong
  #     - KONG_PG_USER=kong
  #     - KONG_PG_PASSWORD=kongpass
  #     - KONG_PASSWORD=test
  #     - KONG_LOG_LEVEL=debug
  #   command: kong migrations bootstrap
  #   restart: on-failure
  #   depends_on:
  #     - kongdb
  
  # kong:
  #   container_name: kong
  #   build:
  #     context: ./kong
  #     dockerfile: Dockerfile
  #   restart: always
  #   environment:
  #     - KONG_DATABASE=postgres
  #     - KONG_PG_HOST=kongdb
  #     - KONG_PG_DATABASE=kong
  #     - KONG_PG_USER=kong
  #     - KONG_PG_PASSWORD=kongpass
  #     - KONG_LOG_LEVEL=debug
  #     - KONG_PROXY_ACCESS_LOG=/dev/stdout
  #     - KONG_PROXY_ERROR_LOG=/dev/stderr
  #     - KONG_ADMIN_ACCESS_LOG=/dev/stdout
  #     - KONG_ADMIN_ERROR_LOG=/dev/stderr
  #     - KONG_ADMIN_LISTEN=0.0.0.0:8001
  #     - KONG_ADMIN_GUI_PATH=/manager
  #     - KONG_ADMIN_GUI_URL=http://0.0.0.0:8002
  #   ports:
  #     - 8000:8000
  #     - 8001:8001
  #     - 8002:8002
  #     - 8003:8003
  #     - 8004:8004
  #     - 8443:8443
  #     - 8444:8444
  #     - 8445:8445
  #   command: kong start
  #   depends_on:
  #     - kong-bootstrap

  # kafka:
  #   container_name: kafka
  #   image: apache/kafka:latest
  #   hostname: kafka
  #   ports:
  #     - ${KAFKA_PORT}:${KAFKA_PORT}
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_PROCESS_ROLES: 'broker,controller'
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:9093'
  #     KAFKA_LISTENERS: 'PLAINTEXT://:19092,CONTROLLER://:9093,PLAINTEXT_HOST://:9092'
  #     KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://kafka:9092
  #     KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
  #     CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  #     KAFKAJS_NO_PARTITIONER_WARNING: 1

  # kafka-ui:
  #   container_name: kafka-ui
  #   image: 'provectuslabs/kafka-ui:latest'
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS=kafka:9092
  #     - KAFKA_CLUSTERS_0_NAME=4L6g3nShT-eMCtK--X86sw
  # client:
  #   container_name: auth-client
  
  user-ms:
    container_name: user-ms
    build:
      context: ./microservices/users
      dockerfile: Dockerfile
    ports:
      - ${USER_MS_PORT}:${USER_MS_PORT}
    environment:
      - USER_MS_PORT=${USER_MS_PORT}
      - DB_HOST=postgresdb
      - DB_PASSWORD=${USER_DB_PASSWORD}
      - DB_USER=${USER_DB_USERNAME}
      - DB=${USER_DB_NAME}
      - MESSAGE_BROKER_URL=${RABBIT_MQ_URL}
    volumes:
      - ./microservices/users/:/app
    depends_on:
      postgresdb:
        condition: service_healthy
  
  auth-ms:
    container_name: auth-ms
    environment:
      - AUTH_PORT=${AUTH_PORT}
      - MESSAGE_BROKER_URL=${RABBIT_MQ_URL}
    build:
      context: ./microservices/auth
      dockerfile: Dockerfile
    ports:
      - ${AUTH_PORT}:${AUTH_PORT}
    volumes:
      - ./microservices/auth/:/usr/src/app
    
volumes:
  kongdata:
  usersdata:

networks:
  default:
    name: kong-net